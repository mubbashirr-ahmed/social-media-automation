using System;
using System.Net;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using Finisar.SQLite;
using SocialMediaAutomationTool.MODEL;
using Microsoft.Win32;
using AltoHttp;

namespace SocialMediaAutomationTool.CONTROLLER
{
    internal class Api
    {
        string conn = "Data Source=database.db;Version=3;New=False;Compress=True;";
        SQLiteConnection sQLiteConnection; 
        TextBox tb;
        

        public Api()
        { }
        public Api(TextBox textBox)
        {
            tb = textBox;
        }       
        public async void VerifyCredential(string uname, string pass)
        {
            string url = "http://192.168.0.108:5000/instagram/fetch"; //place holder
            IEnumerable<KeyValuePair<string, string>> query = new List<KeyValuePair<string, string>>()
            {
                new KeyValuePair<string, string>("email", uname),
                new KeyValuePair<string, string>("password", pass)
            };
            HttpContent q = new FormUrlEncodedContent(query);
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage response = await client.PutAsync(url, q))
                {
                    using (HttpContent content = response.Content)
                    {
                        string mycontent = await content.ReadAsStringAsync();
                        HttpContentHeaders headerrs = content.Headers;
                        tb.Text = mycontent;
                        //we need cookies file returned here
                        //check validation here
                        //return a response respective to credentials i.e. true or false
                        //insert cookies to database
                    }
                }
            }
        } 
        public async void scrapeMedia(string email, string password, string targetuser, int numofposts, string platform, int CID)
        {                    
            string url = "http://127.0.0.1:5000/" + platform + "/fetch/user";
            IEnumerable<KeyValuePair<string, string>> query = new List<KeyValuePair<string, string>>()
            {
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("password", password),
                new KeyValuePair<string, string>("target_user", targetuser),
                new KeyValuePair<string, string>("hashtag", null),
                new KeyValuePair<string, string>("no_of_posts", Convert.ToString(numofposts))
            };
            HttpContent q = new FormUrlEncodedContent(query);
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage response = await client.PutAsync(url, q))
                {
                    using (HttpContent content = response.Content)
                    {
                        string mycontent = await content.ReadAsStringAsync();
                        HttpContentHeaders headerrs = content.Headers;
                        if(platform == "instagram")
                        {
                            scrapeIG(mycontent, CID);
                        }
                        else if(platform == "pinterest")
                        {
                            scrapePT(mycontent, CID);
                        }
                        else if(platform == "facebook")
                        {
                            scrapePT(mycontent, CID);
                        }
                        else if(platform == "reddit")
                        {
                            scrapePT(mycontent, CID);
                        }
                        else if(platform == "twitter")
                        {
                            scrapePT(mycontent, CID);
                        }
                        else
                        {
                            MessageBox.Show("Still to develop!");
                        }                                              
                    }
                }
            }
        }
        public void scrapeIG(string response, int CID)
        {
            sQLiteConnection = new SQLiteConnection(conn);
            sQLiteConnection.Open();
            response = JsonConvert.DeserializeObject<string>(response);
            var data = JsonConvert.DeserializeObject<Instagram>(response); //response in quotes
            string name = data.username;
            string bio = data.bio;
            string follower = data.follower;
            string following = data.following;
            string[] imgurl;
            string[] vidurl;
            foreach (var i in data.posts)
            {
                string like = i.like;
                string comments = i.comment;
                imgurl = i.image;
                vidurl = i.video;
                string dateposted = i.date_posted;
                saveMedia(name, "Instagram", imgurl, ".jpg");
                saveMedia(name, "Instagram", vidurl, ".mp4"); //link needs to be adjusted
                string post_id = File.ReadAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt");
                insertInstaentry(post_id, name, bio, follower, following, like, comments, dateposted, imgurl, vidurl, CID);
                int num = Convert.ToInt32(post_id);
                ++num;
                File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt", num.ToString());

            }
            sQLiteConnection.Close();
            MessageBox.Show("All media saved to directory!");
        }
        public void scrapeFB(string response, int CID)
        {
            sQLiteConnection = new SQLiteConnection(conn);
            sQLiteConnection.Open();
            response = JsonConvert.DeserializeObject<string>(response);
            var data = JsonConvert.DeserializeObject<Facebook>(response);
            string name = data.username;
            foreach(var i in data.posts)
            {
                string[] video = { };
                string post_url = i.post_url;
                string[] img = i.img;
                string like = i.like;
                string share = i.share;
                string comment = i.comment;
                video[0] = i.video;
                if(video[0]==null || video[0]=="")
                {
                    video[0] = null;
                }
                saveMedia(name, "Facebook", img, ".jgp");
                saveMedia(name, "Facebook", video, ".mp4");
                string post_id = File.ReadAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt");
                for (int j=0;j<img.Length;j++)
                {
                    string cmd = "INSERT into Facebook values('" + post_id + "','" + name + "','" + post_url + "','" + img[j] + "','" + like + "','" + share + "','" + comment + "','" + video[0] + "','" + CID + "')";
                    SQLiteCommand sQLiteCommand = new SQLiteCommand(cmd, sQLiteConnection);
                    try
                    {
                        sQLiteCommand.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }
                int num = Convert.ToInt32(post_id);
                ++num;
                File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt", num.ToString());
            }
            sQLiteConnection.Close();
        }
        public void scrapeRD(string response, int CID)
        {
            sQLiteConnection = new SQLiteConnection(conn);
            sQLiteConnection.Open();
            response = JsonConvert.DeserializeObject<string>(response);
            var data = JsonConvert.DeserializeObject<Reddit>(response);
            string name = data.username;
            string[] img = { };
            string[] video = { };
            string post_id = File.ReadAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt");
            foreach (var i in data.posts)
            {
                string post_url = i.post_url;
                img[0] = i.img;
                string comment = i.comment;
                video[0] = i.video;
                string upsight = i.upsight;
                saveMedia(name, "Reddit", img, ".jgp");
                saveMedia(name, "Reddit", video, ".mp4");
                string cmd = "INSERT into Reddit values('" + post_id + "','" + name + "','" + img[0] + "','" + video[0] + "','" + comment + "','" + upsight + "','" + post_url + "','" + CID + "')";
                SQLiteCommand sQLiteCommand = new SQLiteCommand(cmd, sQLiteConnection);
                try
                {
                    sQLiteCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                int num = Convert.ToInt32(post_id);
                ++num;
                File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt", num.ToString());
            }
        }
        public void scrapeTW(string response, int CID)
        {
            sQLiteConnection = new SQLiteConnection(conn);
            sQLiteConnection.Open();
            response = JsonConvert.DeserializeObject<string>(response);
            var data = JsonConvert.DeserializeObject<Twitter>(response);
            string username = data.username;
            string name = data.name;
            string bio = data.bio;
            string follower = data.follower;
            string following = data.following;
            string location = data.location;
            string join_date = data.join_date;
            string[] imgurl;
            string[] vidurl = {};
            string post_id = File.ReadAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt");
            foreach (var i in data.tweet)
            {
                string like = i.like;
                string desc = i.desc;
                string retweet = i.retweet;
                string reply = i.reply;                
                imgurl = i.image;
                vidurl[0] = i.video;        
                saveMedia(username, "Twitter", imgurl, ".jpg");  
                saveMedia(name, "Twitter", vidurl, ".mp4");
                for (int j = 0; j < imgurl.Length; j++)
                {
                    string cmd = "INSERT into Twitter values('" + post_id + "','" + username + "','" + name + "','" + bio + "','" + follower + "','" + following + "','" + location + "','" + join_date + "','" + desc + "','" + like + "','" + retweet + "','" + reply + "','" + imgurl[j] + "','" + vidurl[0] + "','" + CID + "')";
                    SQLiteCommand sQLiteCommand = new SQLiteCommand(cmd, sQLiteConnection);
                    try
                    {
                        sQLiteCommand.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }
                int num = Convert.ToInt32(post_id);
                ++num;
                File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt", num.ToString());
            }
            sQLiteConnection.Close();
            MessageBox.Show("All media saved to directory!");
        }
        public void scrapePT(string response, int CID)
        {
            sQLiteConnection = new SQLiteConnection(conn);
            sQLiteConnection.Open();
            response = JsonConvert.DeserializeObject<string>(response);
            var data = JsonConvert.DeserializeObject<Pinterest>(response);
            string name = data.username;
            string bio = data.bio;
            string follower = data.follower;
            string following = data.following;
            string view = data.views;
            string[] imgurl;
            string[] vidurl;
            string post_id = File.ReadAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt");
            foreach (var i in data.posts)
            {
                string title = i.title;
                string desc = i.desc;
                string comment = i.comment;
                int repin = i.repin;
                int pin_saved = i.pin_saved;
                string datac = i.date_created;
                imgurl = i.image;
                vidurl = i.video;                              
                saveMedia(name, "Pinterest", imgurl, ".jpg");
                saveMedia(name, "Pinterest", vidurl, ".mp4");
                for (int j = 0; j < imgurl.Length; j++)
                {
                    string cmd = "INSERT into Pinterest values('" + post_id + "','" + title + "','" + name + "','" + follower + "','" + following + "','" + bio + "','" + view + "','" + desc + "','" + comment + "','" + repin + "','" + pin_saved + "','" + datac + "','" + imgurl[j] + "','" + null + "','" + CID + "')";
                    SQLiteCommand sQLiteCommand = new SQLiteCommand(cmd, sQLiteConnection);
                    try
                    {
                        sQLiteCommand.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }
                for (int j = 0; j < vidurl.Length; j++)
                {
                    string cmd = "INSERT into Pinterest values('" + post_id + "','" + title + "','" + name + "','" + follower + "','" + following + "','" + bio + "','" + view + "','" + desc + "','" + comment + "','" + repin + "','" + pin_saved + "','" + datac + "','" + null + "','" + vidurl[j] + "','" + CID + "')";
                    SQLiteCommand sQLiteCommand = new SQLiteCommand(cmd, sQLiteConnection);
                    try
                    {
                        sQLiteCommand.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }
                int num = Convert.ToInt32(post_id);
                ++num;
                File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\integers.txt", num.ToString());
            }
            sQLiteConnection.Close();
            MessageBox.Show("All media saved to directory!");
        }
        private void saveMedia(string username, string platform, string[] url, string ext)
        {
            string td = DateTime.Now.ToString("dd-MMM-yyyy");
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Media" + "\\" + platform + "\\" + username + "\\" + td + "\\";
            DirectoryInfo directory = new DirectoryInfo(path);
            if (!directory.Exists)
            {
                directory.Create();
            }
            for (int i = 0; i < url.Length; i++)
            {
                string[] test1 = url[i].Split('?');
                string[] test2 = test1[0].Split('/');
                string[] name = test2[test2.Length - 1].Split('.');
                using (WebClient wc = new WebClient())
                {
                    wc.DownloadFileAsync(
                        new Uri(url[i]), directory + name[0] + ext
                        );
                }
            }
        }
        private void insertInstaentry(string post_id,string name, string bio, string follower,string following,string like,string comments,string dateposted, string[] imgurl,string[] vidurl, int CID)
        {
            for (int j = 0; j < imgurl.Length; j++)
            {
                string cmd = "INSERT into Instagram values('" + post_id + "','" + name + "','" + bio + "','" + follower + "','" + following + "','" + like + "','" + comments + "','" + dateposted + "','" + null + "','" + imgurl[j] + "','" + null + "','" + CID + "')";
                SQLiteCommand sQLiteCommand = new SQLiteCommand(cmd, sQLiteConnection);
                try
                {
                    sQLiteCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            for (int j = 0; j < vidurl.Length; j++)
            {
                string cmd = "INSERT into Instagram values('" + post_id + "','" + name + "','" + bio + "','" + follower + "','" + following + "','" + like + "','" + comments + "','" + dateposted + "','" + null + "','" + null + "','" + vidurl[j] + "','" + CID + "')";
                SQLiteCommand sQLiteCommand = new SQLiteCommand(cmd, sQLiteConnection);
                try
                {
                    sQLiteCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
        }
    }
}
